name: Publish to PyPi

on:
  release:
    types: [published]

  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.15"
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-latest]
        cibw_archs: ["auto64"]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]

    steps:
      - uses: actions/checkout@v3
        name: Check out
        with:
          submodules: recursive    

      - uses: ilammy/msvc-dev-cmd@v1
        name: Add MSVS Path

      - name: Add NASM
        if: matrix.os == 'windows-latest'
        uses: ilammy/setup-nasm@v1

      - name: Add Ninja
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@master

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.16.2 delvewheel wheel

      - name: Building wheels 
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_SKIP: "*musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_MACOS: brew install nasm &&
                          bash ci-utils/install_prereq_linux.sh &&
                          mkdir -p /tmp/bfiocpp_bld &&
                          cp -r local_install /tmp/bfiocpp_bld
          CIBW_BEFORE_ALL_LINUX: yum -y install wget &&
                                   wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2 &&
                                   tar -xjf nasm-2.15.05.tar.bz2 &&
                                   cd nasm-2.15.05 &&
                                   ./configure && 
                                   make && 
                                   make install &&
                                   cd .. &&
                                   yum -y install maven java &&
                                   bash ci-utils/install_prereq_linux.sh &&
                                   mkdir -p /tmp/bfiocpp_bld &&
                                   cp -r local_install /tmp/bfiocpp_bld
          CIBW_BEFORE_ALL_WINDOWS: ci-utils\install_prereq_win.bat &&
                                   xcopy /E /I /y local_install C:\TEMP\bfiocpp_bld\local_install 
          CIBW_ENVIRONMENT_MACOS: REPAIR_LIBRARY_PATH="/tmp/bfiocpp_bld/local_install/lib:/tmp/bfiocpp_bld/local_install/lib64" ON_GITHUB="TRUE" BFIO_CPP_DEP_DIR="/tmp/bfiocpp_bld/local_install"
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH="/tmp/bfiocpp_bld/local_install/lib:/tmp/bfiocpp_bld/local_install/lib64:$LD_LIBRARY_PATH" ON_GITHUB="TRUE" BFIO_CPP_DEP_DIR="/tmp/bfiocpp_bld/local_install" 
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-listdeps {wheel} && DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
          CIBW_ENVIRONMENT_WINDOWS: PATH="$TEMP\\bfiocpp\\bin;$PATH" ON_GITHUB="TRUE" BFIO_CPP_DEP_DIR="C:\\TEMP\\bfiocpp_bld\\local_install" CMAKE_ARGS="-DCMAKE_GENERATOR=Ninja"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_REQUIRES: bfio requests numpy ome_zarr
          CIBW_TEST_COMMAND: python -W default -m unittest discover -s {project}/tests -v

      - name: Install Dependencies
        run: python -m pip install --upgrade twine requests
        
      - name: Publish to PyPi
        run: python -m twine upload dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY: pypi

  build_wheels_apple_arm64:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: "11.0"
    strategy:
      matrix:
        os: [macos-13-xlarge]
        cibw_archs: ["arm64"]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]

    steps:
      - uses: actions/checkout@v3
        name: Check out

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.11'
  
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.16.2 delocate wheel

      - name: Building wheels 
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS_MACOS: arm64
          CIBW_BEFORE_ALL_MACOS:  brew install nasm libjpeg-turbo &&
                                  brew install llvm@16 && 
                                  sudo xcode-select -s /Applications/Xcode_14.2.app &&
                                  bash ci-utils/install_prereq_linux.sh &&
                                  mkdir -p /tmp/bfiocpp_bld &&
                                  cp -r local_install /tmp/bfiocpp_bld
                            
          CIBW_ENVIRONMENT_MACOS: REPAIR_LIBRARY_PATH="/tmp/bfiocpp_bld/local_install/lib:/tmp/bfiocpp_bld/local_install/lib64" ON_GITHUB="TRUE" BFIO_CPP_DEP_DIR="/tmp/bfiocpp_bld/local_install" CMAKE_ARGS="-DTENSORSTORE_USE_SYSTEM_JPEG=ON"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-listdeps {wheel} && DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_REQUIRES: bfio requests numpy ome_zarr
          CIBW_TEST_COMMAND: python -W default -m unittest discover -s {project}/tests -v

      - name: Install Dependencies
        run: python -m pip install --upgrade twine requests
        
      - name: Publish to PyPi
        run: python -m twine upload dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY: pypi